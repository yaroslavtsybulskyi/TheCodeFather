Task 7:
Results:
[RUN_SYNCHRONOUSLY] completed in 94.01 seconds
[RUN_MULTITHREADS] completed in 21.10 seconds
[RUN_MULTIPROCESSING] completed in 20.24 seconds
[RUN_ASYNCHRONOUSLY] Completed in 3.82 seconds

Результати дослідження показують що синхронний метод є найповільнішим в порівнянні з усіма. Головна причина - всі запити
виконуються послідовно.
Використання мультитредів та мультипроцксингу прискорює виконання задачі, але це все ще є максимально ефективним результатом.
Найбільш ефективним для роботи з HTTP запитами є асинхронний підхід.
****************************************************************************************************************************

Інтегрувати асинхронний код у вже існуючий синхронний проект на Python можна за додпомогою бібліотеки asyncio.
Це можна зробити за допомогою asyncio.run(), якщо асинхронний код запускається один раз,
або через asyncio.get_event_loop().run_until_complete() у випадках, коли asyncio має працювати паралельно зі синхронним кодом.
Також, синхронний код можна ранити асинхронно за допомогою asyncio.to_thread()

****************************************************************************************************************************
Асинхронні підключення до БД можуть бути ресурсозатратними і не всі бази даних підтримують асинхронність, що може призвести
до блокування програми. Це все в додаток до стандартних підводних каменів використання асинхронних бібліотек.